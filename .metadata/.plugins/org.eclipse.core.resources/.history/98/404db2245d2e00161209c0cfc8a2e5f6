package PatrónComposite;

import java.util.ArrayList;

public class Item implements Componible, Iterable{
	private String nombre;
	private boolean compuesto;
	private ArrayList<Item> hijos;
	
	public Item(){
	}
	
	public Item(String nombre){
		this.setNombre(nombre);
	}
	
	public String getNombre() {
		return nombre;
	}
	
	public boolean isCompuesto(){
		
		return compuesto;//falta implementar
		
	}
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public ArrayList<Item> getHijos() {
		return hijos;
	}
	
	public void anhadir(Item item){
		hijos.add(item);
	}
	
	public void quitar(Item item){
		hijos.remove(item);
	}
	public void quitar(String nombre){
		hijos.remove(nombre);
	}

	protected String repetir(String nombre, int numero){
		return nombre; //falta implementar
		
	}

	@Override
	public void iterable() {
		for (Item datos : this.getHijos()){
	         System.out.println(datos);
		}
		/*for (Employee headEmployee : CEO.getSubordinates()) {
	         System.out.println(headEmployee);*/
		
	}

	@Override
	public void composite(String List) {
		// TODO Auto-generated method stub
		
	}
	public void composite(ArrayList<Item> item){
		//falta implementar
	}
	public String toString(){
		return ("[ Name : " + nombre);
	}

}
